I"é<p class="lead">Uma constru√ß√£o para repetir comandos, ou um grupo de comandos, √© chamada de <em>loop</em>, ou <strong>la√ßo</strong> em portugu√™s.</p>

<!-- ## Nesta p√°gina:
{: .no_toc .text-delta }

1. TOC
{:toc}
-->

<h2 id="a-constru√ß√£o-while">A constru√ß√£o <code class="language-plaintext highlighter-rouge">while</code></h2>

<p>Um dos comandos para criar um la√ßo (repeti√ß√£o de comandos) √© o <code class="language-plaintext highlighter-rouge">while</code> (<em>enquanto</em>). A sintaxe do comando √© a seguinte:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="p">[</span><span class="n">comandos</span><span class="p">]</span>
</code></pre></div></div>
<p>onde <code class="language-plaintext highlighter-rouge">bool</code> √© uma vari√°vel l√≥gica, ou um teste que resulte numa vari√°vel l√≥gica. Repare que √© o mesmo tipo de constru√ß√£o qua a usada para testar condi√ß√µes (<code class="language-plaintext highlighter-rouge">if-elif-else</code>).</p>

<p>Por exemplo, o seguinte fragmento de c√≥digo imprime a soma dos n√∫meros inteiros de 1 a 10:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">soma</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">:</span>
    <span class="n">soma</span> <span class="o">+=</span> <span class="n">n</span>
    <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="nf">print</span><span class="p">(</span><span class="n">soma</span><span class="p">)</span>
</code></pre></div></div>

<p>Repare que o <code class="language-plaintext highlighter-rouge">while</code> n√£o sabe de antem√£o quantas itera√ß√µes ser√£o realizadas: ele precisa testar a condi√ß√£o (<code class="language-plaintext highlighter-rouge">n &lt;= 10</code>) a cada nova itera√ß√£o (do latim <em>iter</em>: rota). Portanto, se voc√™ n√£o tomar cuidado, o <code class="language-plaintext highlighter-rouge">while</code> pode entrar num <em>‚Äúloop infinito‚Äù</em>.</p>

<h2 id="a-constru√ß√£o-for">A constru√ß√£o <code class="language-plaintext highlighter-rouge">for</code></h2>

<p>Uma outra maneira de criar la√ßos, quando sabemos exatamente quantas itera√ß√µes queremos fazer, √© usando a constru√ß√£o <code class="language-plaintext highlighter-rouge">for</code>. A sintaxe do comando pode ser entendida usando o mesmo exemplo acima:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">soma</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">):</span>
    <span class="n">soma</span> <span class="o">+=</span> <span class="n">n</span>
<span class="nf">print</span><span class="p">(</span><span class="n">soma</span><span class="p">)</span>
</code></pre></div></div>

<p>Ou seja, o for gera valores de 1 a 10 usando o comando <code class="language-plaintext highlighter-rouge">range</code>, atribu√≠dos sequencialmente a uma vari√°vel <code class="language-plaintext highlighter-rouge">n</code>.</p>

<h2 id="observa√ß√µes">Observa√ß√µes</h2>

<ul>
  <li>Mais detalhes sobre o comando <code class="language-plaintext highlighter-rouge">range</code> no pr√≥ximo material.</li>
  <li>A palavra <code class="language-plaintext highlighter-rouge">in</code> no comando <code class="language-plaintext highlighter-rouge">for</code> √© uma palavra chave. Mais detalhes em breve.</li>
</ul>
:ET