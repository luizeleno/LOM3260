I"‰<p class="lead">Um c√≥digo python √© escrito de maneira estruturada usando tabula√ß√µes (indenta√ß√£o) criando blocos dentro do arquivo</p>

<h2 id="sistema-de-arquivos">Sistema de arquivos</h2>

<ul>
  <li>Arquivos leg√≠veis por um <em>interpretador</em> python tem o formato de arquivos texto.</li>
  <li>Usualmente, para identific√°-los, adiciona-se a <em>extens√£o</em> <code class="language-plaintext highlighter-rouge">.py</code> ao nome do arquivo</li>
  <li>N√£o existem muitas restri√ß√µes quanto ao nome do arquivo (isso depende mais do seu sistema operacional), mas eu recomendo evitar espa√ßos em branco e caracteres especiais e acentuados para batizar seus programas. Isso √© uma garantia de maior portabilidade de seus c√≥digos para diversas plataformas (windows, linux, mac, ‚Ä¶)</li>
</ul>

<h2 id="sintaxe-python">Sintaxe python</h2>

<p>Diferente de outras linguagens de programa√ß√£o, como C, C++ e Java, os diferentes blocos de um programa python s√£o identificados por <strong>tabula√ß√µes</strong>, ou espa√ßos em branco que servem como <strong>indenta√ß√£o</strong>  (espa√ßo em branco antes dos comandos)  e fazem o papel das chaves nas linguagens citadas. Por exemplo, o seguinte c√≥digo escrito em C:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* isto √© um coment√°rio */</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">while</span><span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">y</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
  <span class="n">n</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"y = %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</code></pre></div></div>
<p>√© equivalente, em python, ao seguinte:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># isto √© um coment√°rio
</span><span class="n">n</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
  <span class="n">y</span> <span class="o">+=</span> <span class="n">n</span>
  <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="k">print</span><span class="p">(</span><span class="s">f'y = </span><span class="si">{</span><span class="n">y</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>Em C, o bloco definido pelo comando <code class="language-plaintext highlighter-rouge">while</code> √© delimitado pelas chaves (<code class="language-plaintext highlighter-rouge">{}</code>). Al√©m disso, cada comando √© terminado necessariamente por um ponto-e-v√≠rgula (<code class="language-plaintext highlighter-rouge">;</code>). A indenta√ß√£o dentro do bloco <code class="language-plaintext highlighter-rouge">while</code> √© puramente opcional, servindo apenas para aumentar a legibilidade do c√≥digo.</p>

<p>Em python, por outro lado, a indenta√ß√£o √© <strong>obrigat√≥ria</strong>: √© a maneira pela qual o python identifica quais comandos pertencem ao bloco <code class="language-plaintext highlighter-rouge">·∫Åhile</code> e quais n√£o pertencem. Veja que a √∫nica diferen√ßa entre a a pen√∫ltima linha (<code class="language-plaintext highlighter-rouge">n += 1</code>) e a √∫ltima (<code class="language-plaintext highlighter-rouge">print(f'y = {y}')</code>) √© a falta de indenta√ß√£o desta √∫ltima, fazendo com que ela esteja fora do <code class="language-plaintext highlighter-rouge">while</code>. Para tornar o c√≥digo mais leg√≠vel, seria interessante deixar uma linha em branco entre essas duas linhas.</p>

<p class="alert alert-primary">:information_source: Em python, qualquer coisa ap√≥s o s√≠mbolo <code class="language-plaintext highlighter-rouge">#</code> √© um <strong>coment√°rio</strong>. O int√©rprete python ignora essas partes do c√≥digo quando executa seus programas. Coment√°rios servem para melhor <em>documentar</em> o seu c√≥digo, como observa√ß√µes para quem vai ler seu c√≥digo e tentar entend√™-lo. Inclusive para voc√™ mesmo, depois de alguns dias sem olhar para ele!</p>

<p>Veja que diferentes blocos podem estar <em>aninhados</em>, novamente usando indenta√ß√£o. Por exemplo, considere o seguinte c√≥digo:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
  <span class="k">while</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
    <span class="n">y</span> <span class="o">+=</span> <span class="n">n</span>
    <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="n">m</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="s">f'y = </span><span class="si">{</span><span class="n">y</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>A linha <code class="language-plaintext highlighter-rouge">n += 1</code> est√° dentro do segundo <code class="language-plaintext highlighter-rouge">while</code>, mas a √∫ltima linha (<code class="language-plaintext highlighter-rouge">m += 1</code>) est√° dentro do primeiro, mas fora do segundo.</p>

<p>Assim, um c√≥digo python √©, em geral, mais conciso que c√≥digos escritos em outras linguagens semelhantes. Tamb√©m por esse motivo, √© preciso tomar cuidado, pois falhas na indenta√ß√£o podem dificultar o processo de <em>debugging</em> (elimina√ß√£o de erros).</p>
:ET