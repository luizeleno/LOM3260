I"€*<p class="lead">Uma maneira r√°pida e elegante de iterar por elementos de uma lista ou string</p>

<p>Considere o seguinte c√≥digo usado para multiplicar todos os elementos de uma lista por uma constante:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">16</span><span class="p">]</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">2</span>
<span class="c1"># quero multiplicar todos os elementos de L por c
</span><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">L</span><span class="p">)):</span>
  <span class="n">L</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">*=</span> <span class="n">c</span>

<span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
</code></pre></div></div>
<p>O c√≥digo acima atinge o objetivo esperado: multiplicar todos os elementos da lista <code class="language-plaintext highlighter-rouge">L</code> por dois.</p>

<p class="alert alert-primary">:question: Pergunta: o que o comando: <code class="language-plaintext highlighter-rouge">L * c</code> faria?</p>

<p>Existe uma outra maneira de fazer a multiplica√ß√£o desejada usando um conceito chamado <strong>list comprehension</strong>, ou <em>abrang√™ncia de lista</em>. A ideia √© usar colchetes (<code class="language-plaintext highlighter-rouge">[]</code>), que √© o indicador de indexa√ß√£o, como sabemos, para criar uma nova lista seguindo a regra encontrada dentro dos colchetes. No caso do exemplo acima, ter√≠amos</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">16</span><span class="p">]</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">Lnovo</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="o">*</span> <span class="n">c</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">L</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">Lnovo</span><span class="p">)</span>
</code></pre></div></div>
<p>Repare que, no c√≥digo acima, <code class="language-plaintext highlighter-rouge">n</code> √© apenas um √≠ndice auxiliar (<em>‚Äúdummy index‚Äù</em>) para percorrer os elementos de <code class="language-plaintext highlighter-rouge">L</code>, um a um, multiplicando-os por <code class="language-plaintext highlighter-rouge">c</code>. O resultado √© salvo numa outra lista, <code class="language-plaintext highlighter-rouge">Lnovo</code>.</p>

<p>A sintaxe completa da constru√ß√£o para <strong>list comprehension</strong> √© a seguinte:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">expressao</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">lista</span> <span class="k">if</span> <span class="n">condicao</span><span class="p">]</span>
</code></pre></div></div>
<p>que tem a seguinte interpreta√ß√£o em plavras: executar o comando <code class="language-plaintext highlighter-rouge">expressao</code> para (<code class="language-plaintext highlighter-rouge">for</code>) todo <code class="language-plaintext highlighter-rouge">item</code> encontrado em (<code class="language-plaintext highlighter-rouge">in</code>) <code class="language-plaintext highlighter-rouge">lista</code> se (<code class="language-plaintext highlighter-rouge">if</code>) a <code class="language-plaintext highlighter-rouge">condicao</code> √© satisfeita (ou seja, retorna <code class="language-plaintext highlighter-rouge">True</code>). Essa √∫ltima parte (o <code class="language-plaintext highlighter-rouge">if</code>) √© opcional.</p>

<p>A nota√ß√£o de list comprehension √© equivalente ao seguinte aninhamento de um <code class="language-plaintext highlighter-rouge">if</code> num <code class="language-plaintext highlighter-rouge">for</code>:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">lista</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">condicao</span><span class="p">:</span>
        <span class="n">expressao</span>
</code></pre></div></div>

<p>Um outro exemplo: digamos que temos a seguinte lista:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Cristina'</span><span class="p">,</span> <span class="s">'Jefferson'</span><span class="p">,</span> <span class="mf">13.5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="s">'#af3429'</span><span class="p">,</span> <span class="mi">2</span><span class="o">-</span><span class="mf">1.j</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span> <span class="mi">4</span> <span class="p">]</span>
</code></pre></div></div>
<p>e queremos extrair apenas as vari√°veis do tipo <code class="language-plaintext highlighter-rouge">int</code>, multiplicando-as por 3, deixando de lado os outros dados. Podemos usar list comprehension e fazer:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Cristina'</span><span class="p">,</span> <span class="s">'Jefferson'</span><span class="p">,</span> <span class="mf">13.5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="s">'#af3429'</span><span class="p">,</span> <span class="mi">2</span><span class="o">-</span><span class="mf">1.j</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span> <span class="mi">4</span> <span class="p">]</span>
<span class="n">dados_int3</span> <span class="o">=</span> <span class="p">[</span><span class="n">dado</span> <span class="o">*</span> <span class="mi">3</span> <span class="k">for</span> <span class="n">dado</span> <span class="ow">in</span> <span class="n">dados</span> <span class="k">if</span> <span class="nf">type</span><span class="p">(</span><span class="n">dado</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">dados_int3</span><span class="p">)</span>
</code></pre></div></div>
<p>Veja que, nesse caso, <code class="language-plaintext highlighter-rouge">dados_int3</code> ser√° uma lista com dois elementos: <code class="language-plaintext highlighter-rouge">[15, 12]</code>. Nessa situa√ß√£o, repare que usamos list comprehension como uma esp√©cie de filtro dos elementos da lista.</p>

<p>Se voc√™ n√£o quiser usar list comprehension, pode sempre atingir o objetivo de maneira mais ‚Äútradicional:‚Äù</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dados</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Cristina'</span><span class="p">,</span> <span class="s">'Jefferson'</span><span class="p">,</span> <span class="mf">13.5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="s">'#af3429'</span><span class="p">,</span> <span class="mi">2</span><span class="o">-</span><span class="mf">1.j</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span> <span class="mi">4</span> <span class="p">]</span>
<span class="n">dados_int3</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">dado</span> <span class="ow">in</span> <span class="n">dados</span><span class="p">:</span>
  <span class="k">if</span> <span class="nf">type</span><span class="p">(</span><span class="n">dado</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">dados_int3</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">dado</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">dados_int3</span><span class="p">)</span>
</code></pre></div></div>
<p>Bem mais prolixo, concorda?</p>

<p class="alert alert-success">:heavy_check_mark: List comprehension funciona tamb√©m com strings, tuplas e dicion√°rios! Teste o seguinte exemplo:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dic</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="s">'a'</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="s">'b'</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span><span class="s">'c'</span><span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="s">'valores no dicion√°rio:'</span><span class="p">)</span>
<span class="p">[</span><span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">dic</span><span class="p">[</span><span class="n">c</span><span class="p">])</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">dic</span><span class="p">]</span>
</code></pre></div></div>
<p>Experimente trocar a √∫ltima linha por <code class="language-plaintext highlighter-rouge">print([ (c, dic[c]) for c in dic])</code> para ver a diferen√ßa. Tente entend√™-la!</p>
:ET