I"≤<p class="lead">Usando sobrecarga de operadores, vamos ver uma maneira de criar listas e strings de maneira f√°cil e r√°pida</p>

<p>Imagine que voc√™ precise de uma lista de 200 elementos, todos iguais a 1. Voc√™ poderia fazer o seguinte:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">L</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># uma lista vazia
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">200</span><span class="p">):</span>
  <span class="n">L</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
</code></pre></div></div>
<p>Esse c√≥digo usa o comando <code class="language-plaintext highlighter-rouge">append</code>, que n√£o descrevi anteriormente porque n√£o vamos us√°-lo neste curso, j√° que, em computa√ß√£o cient√≠fica, como veremos, √© prefer√≠vel trabalhar com <strong>arrays</strong>, e n√£o com listas (veremos mais sobre arrays no devido tempo). Mas, basicamente, <code class="language-plaintext highlighter-rouge">L.append(c)</code> √© um <em>m√©todo</em> para acrescentar o elemento <code class="language-plaintext highlighter-rouge">c</code> ao final da lista <code class="language-plaintext highlighter-rouge">L</code>.</p>

<p>O c√≥digo acima, apesar de funcionar, n√£o √© o mais indicado nessa situa√ß√£o. Podemos aproveitar a sobrecarga do operador <code class="language-plaintext highlighter-rouge">*</code> para ‚Äúmultiplicar‚Äù os elementos de uma lista. Veja:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="mi">200</span>
<span class="k">print</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
</code></pre></div></div>
<p>O comando <code class="language-plaintext highlighter-rouge">[1] * 200</code> faz exatamente o mesmo que todo o conte√∫do do <code class="language-plaintext highlighter-rouge">for</code> do c√≥digo-exemplo anterior!  Veja que o c√≥digo funciona com listas contendo elementos de qualquer tipo:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Oi'</span><span class="p">]</span> <span class="o">*</span> <span class="mi">200</span>
<span class="k">print</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
</code></pre></div></div>
<p>E funciona tamb√©m para criar strings com caracteres repetidos:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="s">'Oi'</span> <span class="o">*</span> <span class="mi">200</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<p>Concluindo: a sobrecarga do operador <code class="language-plaintext highlighter-rouge">*</code> √© uma √≥tima maneira de <strong>inicializar</strong> listas e strings.</p>
:ET