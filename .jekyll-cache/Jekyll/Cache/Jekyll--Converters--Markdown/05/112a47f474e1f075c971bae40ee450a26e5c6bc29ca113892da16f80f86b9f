I"D<p class="lead">Funções podem ter argumentos opcionais com valores pré-definidos</p>

<h2 id="argumentos-opcionais">Argumentos opcionais</h2>

<p>Chegou a hora de cumprir (parcialmente) a promessa que eu fiz quando falei pela primeira vez do comando <code class="language-plaintext highlighter-rouge">help()</code> na página sobre <a href="/LOM3260/material/tema3/02-documentacao.html">Documentação</a>. Ali vimos que a função <code class="language-plaintext highlighter-rouge">print()</code> tem uma série de argumentos opcionais, além dos obrigatórios (que são os objetos que queremos imprimir, naturalmente). Já vimos exemplos disso antes: a função <code class="language-plaintext highlighter-rouge">range()</code>, por exemplo, pode ser chamada com um argumento obrigatório (<code class="language-plaintext highlighter-rouge">end</code>) e até dois opcionais (<code class="language-plaintext highlighter-rouge">start</code> e <code class="language-plaintext highlighter-rouge">step</code>), como vimos na última aula do Tema 1, <a href="/LOM3260/material/tema1/10-in-len.html">Comandos in e len()</a>.</p>

<p>Vamos lá então ver mais detalhes. Para entender o que são os argumentos opcionais, comecemos considerando a função <code class="language-plaintext highlighter-rouge">round()</code>, que faz parte do python padrão. O comando <code class="language-plaintext highlighter-rouge">help(round)</code> fornece a seguinte docstring:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Help on built-in function round in module builtins:

round(...)
    round(number[, ndigits]) -&gt; number

    Round a number to a given precision in decimal digits (default 0 digits).
    This returns an int when called with one argument, otherwise the
    same type as the number. ndigits may be negative.
</code></pre></div></div>
<p>Da docstring da função, lemos que <code class="language-plaintext highlighter-rouge">round()</code> pode ser chamada com um ou dois argumentos e serve para arredondar um float para um dado número de casas decimais. O primeiro argumento (<code class="language-plaintext highlighter-rouge">number</code>) é o número que se deseja arredondar, e esse argumento é obrigatório. Já o segundo argumento (<code class="language-plaintext highlighter-rouge">ndigits</code>), o número de algarismos decimais, é opcional. Se não for fornecido, ele tem o valor padrão (zero), e a função retornará o <code class="language-plaintext highlighter-rouge">int</code> mais próximo de <code class="language-plaintext highlighter-rouge">number</code>. Mas, se o usuário fornecer o segundo argumento, a função <code class="language-plaintext highlighter-rouge">round()</code> retornará um <code class="language-plaintext highlighter-rouge">float</code> correspondendo a <code class="language-plaintext highlighter-rouge">number</code> arredondado com o número de casas desejado. Compare as saídas dos seguintes chamados à função <code class="language-plaintext highlighter-rouge">round()</code>:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="mf">3.141592653589793</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">round</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">round</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">round</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">round</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="argumentos-por-nome">Argumentos por nome</h2>

<p>Vamos agora fazer um malabarismo. Conhecer os nomes das variáveis usadas como referência aos argumentos é uma informação interessante: Se os conhecemos, podemos chamar a função usando <strong>named arguments</strong>, ou <em>argumentos por nome</em>. Veja esse exemplo:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="mf">3.141592653589793</span>
<span class="n">y</span> <span class="o">=</span> <span class="nf">round</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="n">x</span><span class="p">,</span> <span class="n">ndigits</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</code></pre></div></div>
<p>Essa chamada a <code class="language-plaintext highlighter-rouge">round</code> é 100% equivalente a <code class="language-plaintext highlighter-rouge">round(x, 2)</code>. Mas, com argumentos por nome, podemos até mesmo trocar a ordem dos argumentos:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="mf">3.141592653589793</span>
<span class="n">y</span> <span class="o">=</span> <span class="nf">round</span><span class="p">(</span><span class="n">ndigits</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">x</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</code></pre></div></div>
<p>Tudo continua exatamente equivalente.</p>

<p>Pode parecer pouca vantagem nesse ponto, mas usar argumentos por nome é uma ótima maneira de deixar seu código mais legível, se usamos nomes auto-explicativos, além de tornar irrelevante a ordem dos argumentos nas chamadas à função.</p>

<p class="alert alert-warning">:warning: Se você não usa argumentos por nome, a ordem dos argumentos continua importante!!!</p>

<p>Você também pode mesclar a maneira como fornece os argumentos: uma parte sem nomes, outra parte com:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="mf">3.141592653589793</span>
<span class="n">y</span> <span class="o">=</span> <span class="nf">round</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">ndigits</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</code></pre></div></div>
<p>Esse código também é equivalente aos anteriores.</p>

<p class="alert alert-danger">:x: Não se pode começar com argumentos por nome e depois fornecer argumentos sem nome. Por exemplo, <code class="language-plaintext highlighter-rouge">round(ndigits=2, 5)</code> termina numa mensagem de erro (faça o teste!), assim como <code class="language-plaintext highlighter-rouge">round(number=5, 2)</code>, mas <code class="language-plaintext highlighter-rouge">round(5, ndigits=2)</code> é plenamente aceitável.</p>

<h2 id="crie-funções-com-argumentos-opcionais">Crie funções com argumentos opcionais</h2>

<p>Com os conhecimentos apenas adquiridos, podemos começar a criar nossas próprias funções com argumentos opcionais. É um processo muito simples: basta usar valores padrão quando da definição da função usando <code class="language-plaintext highlighter-rouge">def</code>. Eu sei que isso não quer dizer nada pra você! Então vamos ver um exemplo.</p>

<div class="col-md-3 float-right">
<div class="text-center">
<figure class="figure">
  
  <a href="#" data-toggle="modal" data-target="#circ">
  
    <img class="figure-img img-fluid rounded mx-auto" src="/LOM3260/assets/images/tikz/setor-circulo.png-1.png" alt="Um setor circular" title="Um setor circular" />
  
  </a>
  
  
  <figcaption class="figure-caption">
    Um setor circular
  </figcaption>
  

<!-- Modal -->

<div class="modal fade" id="circ" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header text-light bg-dark">
        <h5>Um setor circular</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span class="text-light" aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <a id="no-ext-link" href="/LOM3260/assets/images/tikz/setor-circulo.png-1.png" target="_blank">
        <img class="figure-img img-fluid rounded w-100mx-auto" src="/LOM3260/assets/images/tikz/setor-circulo.png-1.png" alt="Um setor circular" title="Um setor circular" />
        </a>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">OK</button>
      </div>
    </div>
  </div>
</div>


</figure>
</div>

</div>

<p>Para manter as coisas simples, vamos definir uma função para calcular a área de um setor circular (uma fatia de pizza!) de ângulo $\theta$ num círculo de raio $r$, como na figura. A área em questão é dada pela fórmula a seguir:</p>

\[A=\frac{1}{2} \theta r^2\]

<p>sendo que $\theta$ precisa estar em radianos. Além disso, a sua função deve calcular a área do círculo completo ($\theta=2\pi$) se o usuário fornecer só o raio, que é então o único argumento obrigatório.</p>

<p>Eu faria assim:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">def</span> <span class="nf">area_pizza</span><span class="p">(</span><span class="n">raio</span><span class="p">,</span> <span class="n">theta</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">):</span>
  <span class="k">return</span> <span class="p">.</span><span class="mi">5</span> <span class="o">*</span> <span class="n">theta</span> <span class="o">*</span> <span class="n">raio</span> <span class="o">*</span> <span class="n">raio</span>
</code></pre></div></div>

<p>Veja, em primeiro lugar, que eu importei o <code class="language-plaintext highlighter-rouge">numpy</code> para poder usar a definição de $\pi$ contida nesse módulo (<code class="language-plaintext highlighter-rouge">numpy.pi</code>). A seguir, veja que, na definição da função <code class="language-plaintext highlighter-rouge">area_pizza</code>, o argumento <code class="language-plaintext highlighter-rouge">raio</code> não tem nenhum valor pré-definido, diferente de $\theta$, cujo valor pré-definido é <code class="language-plaintext highlighter-rouge">2*np.pi</code>. Por isso:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">raio</code> é um argumento obrigatório da função;</li>
  <li><code class="language-plaintext highlighter-rouge">theta</code> é um argumento opcional, sendo que o valor pré-definido (padrão) é <code class="language-plaintext highlighter-rouge">2*np.pi</code>;</li>
  <li>os argumentos obrigatórios devem vir antes dos opcionais na definição da função usando <code class="language-plaintext highlighter-rouge">def</code>.</li>
</ul>

<p>Assim, todo argumento opcional tem um valor pré-definido e vice-versa: todo argumento com um valor pré-definido é opcional.</p>

<p>Você pode deixar as coisas mais claras para o usuário se acrescentar uma docstring:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="k">def</span> <span class="nf">area_pizza</span><span class="p">(</span><span class="n">raio</span><span class="p">,</span> <span class="n">theta</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">):</span>
  <span class="sh">'''</span><span class="s">
    Calcula a área de uma fatia de pizza

    Uso:
      area_pizza(raio, theta=2*np.pi)

    entrada:
      - raio (float, obrigatório): o raio da pizza
      - theta (float, opcional, padrão: 2*pi): o ângulo da fatia.
          Se não for fornecido, calcula a área da pizza inteira.
    saída:
      - a área da fatia (float)
  </span><span class="sh">'''</span>
  <span class="k">return</span> <span class="p">.</span><span class="mi">5</span> <span class="o">*</span> <span class="n">theta</span> <span class="o">*</span> <span class="n">raio</span> <span class="o">*</span> <span class="n">raio</span>
</code></pre></div></div>

<p>Vamos então brincar com a função com algumas chamadas. Teste todas no intérprete python!</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">r</span> <span class="o">=</span> <span class="mi">25</span>  <span class="c1"># pizza com diâmetro de 50cm!
</span><span class="n">corte</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">8</span>  <span class="c1"># um de oito pedaços da pizza
</span>
<span class="n">Apizza</span> <span class="o">=</span> <span class="nf">area_pizza</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
<span class="n">Apedaco</span> <span class="o">=</span> <span class="nf">area_pizza</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">corte</span><span class="p">)</span>
<span class="n">Apedacoduplo</span> <span class="o">=</span> <span class="nf">area_pizza</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">corte</span><span class="p">)</span>
</code></pre></div></div>

<p>Vamos agora calcular a área de um pedaço de pizza chamando a função de várias maneiras equivalentes:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">r</span> <span class="o">=</span> <span class="mi">25</span>  <span class="c1"># pizza com diâmetro de 50cm!
</span><span class="n">corte</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mi">8</span>  <span class="c1"># um de oito pedaços da pizza
</span>
<span class="c1"># todos os chamados à função abaixo são equivalentes:
</span><span class="n">Apedaco</span> <span class="o">=</span> <span class="nf">area_pizza</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">corte</span><span class="p">)</span>
<span class="n">Apedaco</span> <span class="o">=</span> <span class="nf">area_pizza</span><span class="p">(</span><span class="n">raio</span><span class="o">=</span><span class="n">r</span><span class="p">,</span> <span class="n">theta</span><span class="o">=</span><span class="n">corte</span><span class="p">)</span>
<span class="n">Apedaco</span> <span class="o">=</span> <span class="nf">area_pizza</span><span class="p">(</span><span class="n">theta</span><span class="o">=</span><span class="n">corte</span><span class="p">,</span> <span class="n">raio</span><span class="o">=</span><span class="n">r</span><span class="p">)</span>
<span class="n">Apedaco</span> <span class="o">=</span> <span class="nf">area_pizza</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">theta</span><span class="o">=</span><span class="n">corte</span><span class="p">)</span>
</code></pre></div></div>

<p>Valores pré-definidos são uma excelente opção para funções mais complexas, permitindo ao usuário utilizar rapidamente suas funções confiando que você escolheu valores sensatos para os argumentos opcionais!</p>

<p>Por exemplo, argumentos como precisão, tolerância, método de cálculo e número máximo de iterações de um procedimento numérico podem ter valores pré-definidos que sejam razoáveis para a maior parte das situações práticas. Caso o usuário deseje ou precise, ele pode alterar os argumentos opcionais por sua própria conta. Essa maneira de trabalhar será muito importante quando começarmos a ver os métodos do cálculo numérico.</p>
:ET