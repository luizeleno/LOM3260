I"∂7<p class="lead">Definir suas pr√≥prias fun√ß√µes ‚Äì novas ferramentas! ‚Äì torna seu c√≥digo mais robusto e f√°cil de entender.</p>

<p>Aprender a criar e usar fun√ß√µes personalizadas √© o passo mais importante para sair do n√≠vel novato e alcan√ßar o patamar avan√ßado. A maior parte dos usu√°rios de python n√£o chega a esse n√≠vel, a n√£o ser que j√° tenha trabalhado com, e conhe√ßa um pouco mais a fundo, alguma outra linguagem de programa√ß√£o.</p>

<p>Os iniciantes t√™m certa dificuldade em entender logo de cara um c√≥digo que cont√©m a defini√ß√£o de uma fun√ß√£o. Eu n√£o sei muito bem por que isso acontece (provavelmente passei pelo mesmo problema quando estava aprendendo a programar em C, nos idos de 1995, mas j√° n√£o me lembro‚Ä¶), mas uma <strong>fun√ß√£o</strong> √© uma daquelas ideias f√°ceis de entender‚Ä¶ depois que voc√™ a entendeu (!), e depois voc√™ se pergunta por que teve tanta dificuldade pra entender um conceito t√£o simples.</p>

<p>Acho mais f√°cil come√ßar por um exemplo. Digamos que precisamos determinar a √°rea $A$ de um c√≠rculo, segundo a f√≥rmula usual $A = \pi r^2$, sendo $r$ o raio do c√≠rculo em quest√£o, que deve ser fornecido pelo usu√°rio. Nada mais f√°cil:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="s">'Digite r em cent√≠metros:'</span><span class="p">))</span>
<span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14159</span>  <span class="c1"># uma aproxima√ß√£o para pi
</span><span class="n">A</span> <span class="o">=</span> <span class="n">pi</span> <span class="o">*</span> <span class="n">r</span> <span class="o">*</span> <span class="n">r</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'A √°rea do c√≠rculo de raio </span><span class="si">{</span><span class="n">r</span><span class="si">}</span><span class="s"> cm √© A = </span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="s"> cm¬≤'</span><span class="p">)</span>
</code></pre></div></div>

<p>Mas poder√≠amos tamb√©m criar uma <em>fun√ß√£o</em> e us√°-la no c√≥digo, para deix√°-lo mais <em>modular</em>. Uma fun√ß√£o √© criada usando o comando <code class="language-plaintext highlighter-rouge">def</code> como no exemplo abaixo:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">area_circulo</span><span class="p">(</span><span class="n">raio</span><span class="p">):</span>
  <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14159</span>
  <span class="n">area</span> <span class="o">=</span> <span class="n">pi</span> <span class="o">*</span> <span class="n">raio</span> <span class="o">*</span> <span class="n">raio</span>
  <span class="k">return</span> <span class="n">area</span>
</code></pre></div></div>
<p>Veja que o nome da fun√ß√£o (que voc√™ escolhe!), nesse caso, √© <code class="language-plaintext highlighter-rouge">area_circulo</code>. A fun√ß√£o pede um <strong>argumento</strong>, nesse caso, <code class="language-plaintext highlighter-rouge">raio</code> (um nome que tamb√©m √© de sua escolha). Dentro da fun√ß√£o, as vari√°veis <code class="language-plaintext highlighter-rouge">pi</code> e <code class="language-plaintext highlighter-rouge">area</code> s√£o definidas. Por fim, o valor da vari√°vel <code class="language-plaintext highlighter-rouge">area</code> √© <strong>retornado</strong> ao usu√°rio (usando <code class="language-plaintext highlighter-rouge">return</code>).</p>

<p>Vejamos um exemplo da utiliza√ß√£o dessa fun√ß√£o:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">area_circulo</span><span class="p">(</span><span class="n">raio</span><span class="p">):</span>
  <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14159</span>
  <span class="n">area</span> <span class="o">=</span> <span class="n">pi</span> <span class="o">*</span> <span class="n">raio</span> <span class="o">*</span> <span class="n">raio</span>
  <span class="k">return</span> <span class="n">area</span>

<span class="n">r</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="s">'Digite r em cent√≠metros:'</span><span class="p">))</span>
<span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14159</span>  <span class="c1"># uma aproxima√ß√£o para pi
</span><span class="n">A</span> <span class="o">=</span> <span class="nf">area_circulo</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'A √°rea do c√≠rculo de raio </span><span class="si">{</span><span class="n">r</span><span class="si">}</span><span class="s"> cm √© A = </span><span class="si">{</span><span class="n">A</span><span class="si">}</span><span class="s"> cm¬≤'</span><span class="p">)</span>
</code></pre></div></div>

<p class="alert alert-primary">:bangbang: O que eu percebo, da minha experi√™ncia ensinando programa√ß√£o, √© que muitos iniciantes empacam nesse ponto, por isso, preste aten√ß√£o, pois n√£o √© dif√≠cil (depois que voc√™ entendeu :confounded:):</p>
<ul>
  <li>No in√≠cio do c√≥digo acima, est√°  a <strong>defini√ß√£o da fun√ß√£o.</strong> O python encontra o comando <code class="language-plaintext highlighter-rouge">def</code> e guarda no nome <code class="language-plaintext highlighter-rouge">area_circulo</code> as <strong>instru√ß√µes</strong> contidas nas linhas seguintes (ou seja, nas linhas ‚Äúdentro‚Äù do <code class="language-plaintext highlighter-rouge">def</code>). Mas ele n√£o as executa! Voc√™ apenas ensinou ao python uma nova <strong>ferramenta:</strong> uma <strong>fun√ß√£o</strong>, chamada <code class="language-plaintext highlighter-rouge">area_circulo</code></li>
  <li>O python tamb√©m sabe que a nova fun√ß√£o depende de um argumento, que voc√™ decidiu chamar, <em>para fins da defini√ß√£o da fun√ß√£o</em>, de <code class="language-plaintext highlighter-rouge">raio</code>.</li>
  <li>Depois da defini√ß√£o da fun√ß√£o, ela estar√° dispon√≠vel ao programa, e voc√™ pode <strong>chamar</strong> a fun√ß√£o fornecendo-lhe o argumento que voc√™ quiser! Foi o que fizemos ao usar a fun√ß√£o com o argumento <code class="language-plaintext highlighter-rouge">r</code> na linha <code class="language-plaintext highlighter-rouge">A = area_circulo(r)</code>.</li>
</ul>

<h2 id="fun√ß√µes-de-v√°rios-argumentos">Fun√ß√µes de v√°rios argumentos</h2>

<p>Uma fun√ß√£o pode ter v√°rios argumentos. Por exemplo, para calcular a √°rea de um ret√¢ngulo, poder√≠amos definir a seguinte fun√ß√£o:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">area_retangulo</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">altura</span><span class="p">):</span>
  <span class="n">area</span> <span class="o">=</span> <span class="n">base</span> <span class="o">*</span> <span class="n">altura</span>
  <span class="k">return</span> <span class="n">area</span>
</code></pre></div></div>
<p>e um exemplo de sua utiliza√ß√£o √© o seguinte:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span>
<span class="n">A</span> <span class="o">=</span> <span class="nf">area_retangulo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="retornando-v√°rios-valores">Retornando v√°rios valores</h2>

<p>Uma fun√ß√£o pode tamb√©m retornar mais de um valor! Por exemplo, a fun√ß√£o abaixo retorna a √°rea e o per√≠metro de um ret√¢ngulo:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">AP_retangulo</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">altura</span><span class="p">):</span>
  <span class="n">area</span> <span class="o">=</span> <span class="n">base</span> <span class="o">*</span> <span class="n">altura</span>
  <span class="n">perimetro</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">altura</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">area</span><span class="p">,</span> <span class="n">perimetro</span>
</code></pre></div></div>
<p>e com isso poder√≠amos obter as duas grandezas de uma s√≥ tacada:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span>
<span class="n">A</span><span class="p">,</span> <span class="n">P</span> <span class="o">=</span> <span class="nc">AP_retangulo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="fun√ß√µes-podem-chamar-outras-fun√ß√µes">Fun√ß√µes podem chamar outras fun√ß√µes!</h2>

<p>No √∫ltimo exemplo, poder√≠amos fazer o seguinte: definir tr√™s fun√ß√µes ‚Äì uma para a √°rea, outra para o per√≠metro, e a √∫ltima que chama as duas primeiras:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">area_retangulo</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">altura</span><span class="p">):</span>
  <span class="n">area</span> <span class="o">=</span> <span class="n">base</span> <span class="o">*</span> <span class="n">altura</span>
  <span class="k">return</span> <span class="n">area</span>


<span class="k">def</span> <span class="nf">perimetro_retangulo</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">altura</span><span class="p">):</span>
  <span class="n">perimetro</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">altura</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">perimetro</span>


<span class="k">def</span> <span class="nf">AP_retangulo</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">altura</span><span class="p">):</span>
  <span class="n">area</span> <span class="o">=</span> <span class="nf">area_retangulo</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">altura</span><span class="p">)</span>
  <span class="n">perimetro</span> <span class="o">=</span> <span class="nf">perimetro_retangulo</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">altura</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">area</span><span class="p">,</span> <span class="n">perimetro</span>
</code></pre></div></div>

<p>Assim, ganhamos flexibilidade quando queremos, por exemplo, s√≥ a √°rea:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span>
<span class="n">A1</span> <span class="o">=</span> <span class="nf">area_retangulo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mf">7.</span><span class="p">,</span> <span class="mf">6.5</span>
<span class="n">A2</span><span class="p">,</span> <span class="n">P2</span> <span class="o">=</span> <span class="nc">AP_retangulo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="sobre-o-comando-return">Sobre o comando <code class="language-plaintext highlighter-rouge">return</code></h2>

<p>Veja que o return pode tamb√©m retornar express√µes <em>‚Äúon the fly‚Äù</em> (de passagem):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">quadrado</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
  <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</code></pre></div></div>
<p>Ou seja, n√£o √© imprescind√≠vel retornar um valor previamente atribu√≠do a uma vari√°vel.
Voc√™ poderia us√°-la (assim como as fun√ß√µes anteriores!), por exemplo, assim:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c</span> <span class="o">=</span> <span class="mf">2.5</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="s">¬≤ = </span><span class="si">{</span><span class="nf">quadrado</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

:ET