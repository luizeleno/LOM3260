I"*<p class="lead">Como escolher e manipular partes de uma string ou lista usando indexação (<em>indexing</em>) e fatiamento (<em>slicing</em>)</p>

<p>Quase todos os comandos que veremos a seguir funcionam para objetos do tipo string, lista e tupla. Quando não for o caso, deixaremos indicado.</p>

<h2 id="indexação-indexing">Indexação <em>(Indexing)</em></h2>

<p><strong>Indexing</strong> é a maneira pela qual nos referimos a um elemento de uma lista, string ou tupla. Por exemplo, se temos uma lista <code class="language-plaintext highlighter-rouge">L = [1, 8, 'EEL', 5.43]</code>, cada um dos elementos tem por <strong>índice</strong> um inteiro, começando em zero e sequencialmente aumentando de uma unidade até o último elemento. O primeiro elemento da lista <code class="language-plaintext highlighter-rouge">L</code> é indicado por <code class="language-plaintext highlighter-rouge">L[0]</code>, o segundo por <code class="language-plaintext highlighter-rouge">L[1]</code>, e assim por diante. Acompanhe:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="sh">'</span><span class="s">EEL</span><span class="sh">'</span><span class="p">,</span> <span class="mf">5.43</span><span class="p">]</span>
<span class="n">nL</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">nL</span><span class="p">):</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</code></pre></div></div>
<p>Esse código vai imprimir, um a um, todos os elementos de <code class="language-plaintext highlighter-rouge">L</code>. Lembre que <code class="language-plaintext highlighter-rouge">len(L)</code> fornece o tamanho (nesse caso, o número de elementos) de <code class="language-plaintext highlighter-rouge">L</code>, assim como, se <code class="language-plaintext highlighter-rouge">s</code> é uma string, <code class="language-plaintext highlighter-rouge">len(s)</code> fornece o número de caracteres de <code class="language-plaintext highlighter-rouge">s</code> (incluindo possíveis espaços em branco). Mas repare que o código acima poderia ser simplificado fazendo uso das propriedades do operador <code class="language-plaintext highlighter-rouge">in</code>, já visto anteriormente:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="sh">'</span><span class="s">EEL</span><span class="sh">'</span><span class="p">,</span> <span class="mf">5.43</span><span class="p">]</span>
<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">L</span><span class="p">:</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>
<p>Nesse caso, nem precisamos saber o tamanho da lista! Obviamente, você poderia evitar o uso do <code class="language-plaintext highlighter-rouge">for</code> fazendo simplesmente <code class="language-plaintext highlighter-rouge">print(L)</code>, mas, nesse caso, os elementos de <code class="language-plaintext highlighter-rouge">L</code> apareceriam numa mesma linha, diferentemente do exemplo mostrado acima, onde aparecem sequencialmente, um por linha.</p>

<p>Na lição anterior, vimos que listas são editáveis, ou seja, é possível alterar qualquer um de seus elementos. Isso é feito usando indexação. Por exemplo, usando a mesma lista <code class="language-plaintext highlighter-rouge">L=[1, 8, 'EEL', 5.43]</code>, se quisermos alterar o terceiro elemento (com índice 2, não se esqueça!) para  <code class="language-plaintext highlighter-rouge">Demar</code>, podemos simplesmente fazer <code class="language-plaintext highlighter-rouge">L[2] = 'Demar'</code>. A lista então passa a ser <code class="language-plaintext highlighter-rouge">L=[1, 8, 'Demar', 5.43]</code>.</p>

<p class="lead alert alert-warning">:warning: Não é possível usar indexing para alterar valores de uma string ou de uma tupla! Esses são tipos imutáveis de objetos.</p>

<p>É possível também adicionar e eliminar elementos de uma lista. Consulte a ajuda sobre os comandos <code class="language-plaintext highlighter-rouge">append</code> e <code class="language-plaintext highlighter-rouge">del</code> em qualquer referência sobre python. Nesse curso, não vamos precisar desses comandos, já que migraremos em breve para outros tipos de dados: os <strong>arrays</strong> que o módulo <code class="language-plaintext highlighter-rouge">numpy</code> fornece, muito mais poderosos que listas.</p>

<h3 id="o-que-são-índices-negativos">O que são índices negativos?</h3>

<p>Caso você queira o último elemento, a convenção é usar <strong>índices negativos</strong>: <code class="language-plaintext highlighter-rouge">L[-1]</code> é o último elemento de <code class="language-plaintext highlighter-rouge">L</code>, <code class="language-plaintext highlighter-rouge">L[-2]</code> o penúltimo, e assim por diante. Veja que, com isso, você não precisa necessariamente conhecer o tamanho de <code class="language-plaintext highlighter-rouge">L</code> para obter o seu último (ou qualquer outro) elemento.</p>

<h2 id="fatiamento-slicing">Fatiamento <em>(Slicing)</em></h2>

<p>Se você entendeu como funciona o comando <code class="language-plaintext highlighter-rouge">range()</code>, vai entender o fatiamento de listas, tuplas e strings, pois são muito parecidos. A sintaxe é</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">stop</span><span class="p">:</span><span class="n">step</span><span class="p">]</span>
</code></pre></div></div>
<p>em que <code class="language-plaintext highlighter-rouge">L</code> é uma string, lista ou tupla e <code class="language-plaintext highlighter-rouge">f</code> é uma variável a que se atribuiu uma “fatia” de <code class="language-plaintext highlighter-rouge">L</code> (ou seja, uma parte de <code class="language-plaintext highlighter-rouge">L</code>) a partir do elemento <code class="language-plaintext highlighter-rouge">start</code> até o elemento <code class="language-plaintext highlighter-rouge">stop</code>, mas <strong>SEM INCLUIR <code class="language-plaintext highlighter-rouge">stop</code></strong>, com um passo <code class="language-plaintext highlighter-rouge">step</code>.</p>

<p>Se <code class="language-plaintext highlighter-rouge">start</code> não é fornecido, ele é por padrão <code class="language-plaintext highlighter-rouge">0</code>, ou seja, o primeiro elemento. Se stop não é fornecido, ele é por padrão o último elemento, ou seja, <code class="language-plaintext highlighter-rouge">len(L)</code>. O <code class="language-plaintext highlighter-rouge">step</code> é opcional e, se não for fornecido, vale <code class="language-plaintext highlighter-rouge">1</code> por padrão.</p>

<p>Valores negativos para <code class="language-plaintext highlighter-rouge">start</code> e <code class="language-plaintext highlighter-rouge">stop</code> são aceitos, de forma parecida com a que vimos para a indexação. Um <code class="language-plaintext highlighter-rouge">step</code> negativo também é possível, assim como no caso do comando <code class="language-plaintext highlighter-rouge">range</code>.</p>

<p>Vejamos alguns exemplos:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">L</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Eu sou uma string</span><span class="sh">'</span>

<span class="c1"># primeira palavra (Eu)
</span><span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span>
</code></pre></div></div>
<p>O comando <code class="language-plaintext highlighter-rouge">print</code> imprime os caracteres nas posições <code class="language-plaintext highlighter-rouge">0 e 1</code>, ou seja, a primeira palavra. Continuando com mais exemplos (que você deveria conferir rodando o código!):</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># segunda palavra:
</span><span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="mi">6</span><span class="p">])</span>

<span class="c1"># última palavra:
</span><span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">[</span><span class="o">-</span><span class="mi">6</span><span class="p">:])</span>
</code></pre></div></div>
<p>Veja que, diferentemente do comando <code class="language-plaintext highlighter-rouge">range</code>, números negativos para <code class="language-plaintext highlighter-rouge">start</code> e <code class="language-plaintext highlighter-rouge">stop</code> tem interpretações diferentes no caso de fatiamento!</p>

<p>Finalmente, tente entender o que os seguintes fatiamentos fazem:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># teste: os seguintes comandos imprimem?
</span><span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">[</span><span class="o">-</span><span class="mi">6</span><span class="p">::</span><span class="mi">2</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">[:])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">[::])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>
:ET