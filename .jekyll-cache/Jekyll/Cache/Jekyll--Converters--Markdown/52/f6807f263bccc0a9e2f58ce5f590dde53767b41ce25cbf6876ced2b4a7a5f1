I"©<p class="lead">Numa express√£o como <code class="language-plaintext highlighter-rouge">c = a op b</code>, <code class="language-plaintext highlighter-rouge">a</code> e <code class="language-plaintext highlighter-rouge">b</code> s√£o chamados <em>operandos</em> e <code class="language-plaintext highlighter-rouge">op</code> √© um <strong>operador</strong>. Os operadores abaixo (com exce√ß√£o do <code class="language-plaintext highlighter-rouge">not</code>) agem sobre dois <em>operandos</em> e produzem (<em>retornam</em>) um resultado, que depende dos tipos de dados dos operandos.</p>

<h2 id="operadores-aritm√©ticos">Operadores aritm√©ticos</h2>

<ul>
  <li>adi√ß√£o: <code class="language-plaintext highlighter-rouge">+</code></li>
  <li>subtra√ß√£o: <code class="language-plaintext highlighter-rouge">-</code></li>
  <li>multiplica√ß√£o: <code class="language-plaintext highlighter-rouge">*</code></li>
  <li>divis√£o: <code class="language-plaintext highlighter-rouge">/</code></li>
  <li>exponencia√ß√£o: <code class="language-plaintext highlighter-rouge">**</code></li>
  <li>resto de divis√£o: <code class="language-plaintext highlighter-rouge">%</code></li>
  <li>divis√£o inteira: <code class="language-plaintext highlighter-rouge">//</code></li>
</ul>

<p><strong>Regra:</strong> se <code class="language-plaintext highlighter-rouge">op</code> √© qualquer dos operadores acima, temos que:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">int op int</code> retorna <code class="language-plaintext highlighter-rouge">int</code>
    <ul>
      <li>a exce√ß√£o √© o operador <code class="language-plaintext highlighter-rouge">/</code>, que retorma <code class="language-plaintext highlighter-rouge">float</code> nesse caso</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">int op float</code> retorna <code class="language-plaintext highlighter-rouge">float</code></li>
  <li><code class="language-plaintext highlighter-rouge">float op int</code> retorna <code class="language-plaintext highlighter-rouge">float</code></li>
  <li><code class="language-plaintext highlighter-rouge">float op float</code> retorna <code class="language-plaintext highlighter-rouge">float</code></li>
</ul>

<p><strong>Obs.:</strong> Consulte a aula de <a href="/LOM3260/docs/sobrecarga/"><em>Sobrecarga de operadores</em></a> para outro uso do operador adi√ß√£o quando os operandos s√£o <code class="language-plaintext highlighter-rouge">string</code>.</p>

<h2 id="operadores-de-compara√ß√£o">Operadores de compara√ß√£o</h2>

<p>Se a compara√ß√£o √© satisfeita, os operadores de compara√ß√£o retornam <code class="language-plaintext highlighter-rouge">True</code> (tipo booleanno, ver aula sobre <a href="/LOM3260/docs/tipos/">tipos de dados</a>). Caso contr√°rio, retornam <code class="language-plaintext highlighter-rouge">False</code>.</p>
<ul>
  <li>igualdade: <code class="language-plaintext highlighter-rouge">==</code></li>
  <li>n√£o igualdade: <code class="language-plaintext highlighter-rouge">!=</code> ou <code class="language-plaintext highlighter-rouge">&lt;&gt;</code></li>
  <li>maior que: <code class="language-plaintext highlighter-rouge">&gt;</code></li>
  <li>menor que: <code class="language-plaintext highlighter-rouge">&lt;</code></li>
  <li>maior ou igual a: <code class="language-plaintext highlighter-rouge">&gt;=</code></li>
  <li>menor ou igual a: <code class="language-plaintext highlighter-rouge">&lt;=</code></li>
</ul>

<p class="alert alert-warning">:warning: Veja que o operador de igualdade √© <code class="language-plaintext highlighter-rouge">==</code>, ou seja, dois sinais de igual em sequ√™ncia! Isso porque o operador <code class="language-plaintext highlighter-rouge">=</code>, como vimos, √© o operador de atribui√ß√£o de dados a vari√°veis.</p>

<h2 id="operadores-de-atribui√ß√£o">Operadores de atribui√ß√£o</h2>

<ul>
  <li>atribuir √† vari√°vel: <code class="language-plaintext highlighter-rouge">=</code></li>
  <li>somar e atribuir √† vari√°vel: <code class="language-plaintext highlighter-rouge">+=</code> (<code class="language-plaintext highlighter-rouge">a += b</code> equivale a <code class="language-plaintext highlighter-rouge">a = a + b</code>)</li>
  <li>subtrair e atribuir √† vari√°vel: <code class="language-plaintext highlighter-rouge">-=</code> (<code class="language-plaintext highlighter-rouge">a -= b</code> equivale a <code class="language-plaintext highlighter-rouge">a = a - b</code>)</li>
  <li>multiplicar e atribuir √† vari√°vel: <code class="language-plaintext highlighter-rouge">*=</code> (<code class="language-plaintext highlighter-rouge">a *= b</code> equivale a <code class="language-plaintext highlighter-rouge">a = a * b</code>)</li>
  <li>dividir e atribuir √† vari√°vel: <code class="language-plaintext highlighter-rouge">/=</code> (<code class="language-plaintext highlighter-rouge">a /= b</code> equivale a <code class="language-plaintext highlighter-rouge">a = a / b</code>)</li>
  <li>exponenciar e atribuir √† vari√°vel: <code class="language-plaintext highlighter-rouge">**=</code> (<code class="language-plaintext highlighter-rouge">a **= b</code> equivale a <code class="language-plaintext highlighter-rouge">a = a ** b</code>)</li>
  <li>achar o resto e atribuir √† vari√°vel: <code class="language-plaintext highlighter-rouge">%=</code> (<code class="language-plaintext highlighter-rouge">a %= b</code> equivale a <code class="language-plaintext highlighter-rouge">a = a % b</code>)</li>
  <li>achar a divis√£o inteira e atribuir √† vari√°vel: <code class="language-plaintext highlighter-rouge">//=</code> (<code class="language-plaintext highlighter-rouge">a //= b</code> equivale a <code class="language-plaintext highlighter-rouge">a = a // b</code>)</li>
</ul>

<h2 id="operadores-l√≥gicos">Operadores l√≥gicos</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">and</code>: retorna <code class="language-plaintext highlighter-rouge">True</code> se (e somente se) ambos os operandos s√£o <code class="language-plaintext highlighter-rouge">True</code>, sen√£o retorna <code class="language-plaintext highlighter-rouge">False</code></li>
  <li><code class="language-plaintext highlighter-rouge">or</code>: retorna <code class="language-plaintext highlighter-rouge">True</code> se qualquer um dos operandos √© <code class="language-plaintext highlighter-rouge">True</code>, sen√£o retorna <code class="language-plaintext highlighter-rouge">False</code></li>
  <li><code class="language-plaintext highlighter-rouge">not</code>: usado para reverter o estado l√≥gico de um operando (exemplo: <code class="language-plaintext highlighter-rouge">not(4 &gt; 3 and 5 &gt; 2)</code> retorna <code class="language-plaintext highlighter-rouge">False</code>)</li>
</ul>

<p>Alguns exemplos:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span> <span class="ow">and</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span> <span class="ow">or</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span>
<span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</code></pre></div></div>
<p>Esse c√≥digo imprime <code class="language-plaintext highlighter-rouge">False True</code></p>
:ET